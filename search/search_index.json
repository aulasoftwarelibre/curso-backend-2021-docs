{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Curso de backend 2021 \u00b6 Licencia \u00b6 El material est\u00e1 publicado con licencia Atribuci\u00f3n-NoComercial 4.0 Internacional (CC BY-NC 4.0)","title":"Curso de backend 2021"},{"location":"#curso-de-backend-2021","text":"","title":"Curso de backend 2021"},{"location":"#licencia","text":"El material est\u00e1 publicado con licencia Atribuci\u00f3n-NoComercial 4.0 Internacional (CC BY-NC 4.0)","title":"Licencia"},{"location":"dia1/","text":"D\u00eda 1 \u00b6 Instalaci\u00f3n \u00b6 Docker \u00b6 Es necesario seguir las instrucciones del taller de Docker y tener instalados: Docker-CE (\u00faltima versi\u00f3n) Docker Composer (\u00faltima versi\u00f3n) Tambi\u00e9n se recomienda configurar el usuario con el grupo docker para tener permisos para usar los contenedores sin necesidad de usar sudo. Clonado del repositorio del curso \u00b6 Iremos al repositorio del curso https://github.com/aulasoftwarelibre/curso-backend-2021 y clonaremos el proyecto en nuestro perfil con la opci\u00f3n Fork . Tambi\u00e9n podemos hacerlo directamente pulsando en el siguiente enlace: https://github.com/aulasoftwarelibre/curso-backend-2021/fork Una vez tengamos nuestra copia del proyecto lo clonaremos en nuestro equipo: git clone https://github.com/nuestro-usuario/curso-backend-2021 Construcci\u00f3n de la imagen \u00b6 El repositorio est\u00e1 basado en la imagen de dunglas/symfony-docker y la usaremos por comodidad. Para instalar el proyecto usaremos la siguiente order: make dev Cuando termine el proyecto estar\u00e1 accesible en https://rutas.localhost Permisos \u00b6 El contenedor se compila e instala con permisos de superusuario, necesitaremos cambiar los permisos para poder modificar los ficheros. Ejecutaremos lo siguiente en otra consola: make fix Acceso al contenedor \u00b6 Para obtener acceso shell al contenedor de nuestra aplicaci\u00f3n ejecutaremos lo siguiente: make shell","title":"D\u00eda 1"},{"location":"dia1/#dia-1","text":"","title":"D\u00eda 1"},{"location":"dia1/#instalacion","text":"","title":"Instalaci\u00f3n"},{"location":"dia1/#docker","text":"Es necesario seguir las instrucciones del taller de Docker y tener instalados: Docker-CE (\u00faltima versi\u00f3n) Docker Composer (\u00faltima versi\u00f3n) Tambi\u00e9n se recomienda configurar el usuario con el grupo docker para tener permisos para usar los contenedores sin necesidad de usar sudo.","title":"Docker"},{"location":"dia1/#clonado-del-repositorio-del-curso","text":"Iremos al repositorio del curso https://github.com/aulasoftwarelibre/curso-backend-2021 y clonaremos el proyecto en nuestro perfil con la opci\u00f3n Fork . Tambi\u00e9n podemos hacerlo directamente pulsando en el siguiente enlace: https://github.com/aulasoftwarelibre/curso-backend-2021/fork Una vez tengamos nuestra copia del proyecto lo clonaremos en nuestro equipo: git clone https://github.com/nuestro-usuario/curso-backend-2021","title":"Clonado del repositorio del curso"},{"location":"dia1/#construccion-de-la-imagen","text":"El repositorio est\u00e1 basado en la imagen de dunglas/symfony-docker y la usaremos por comodidad. Para instalar el proyecto usaremos la siguiente order: make dev Cuando termine el proyecto estar\u00e1 accesible en https://rutas.localhost","title":"Construcci\u00f3n de la imagen"},{"location":"dia1/#permisos","text":"El contenedor se compila e instala con permisos de superusuario, necesitaremos cambiar los permisos para poder modificar los ficheros. Ejecutaremos lo siguiente en otra consola: make fix","title":"Permisos"},{"location":"dia1/#acceso-al-contenedor","text":"Para obtener acceso shell al contenedor de nuestra aplicaci\u00f3n ejecutaremos lo siguiente: make shell","title":"Acceso al contenedor"},{"location":"dia2/","text":"D\u00eda 2 \u00b6 Consola \u00b6 Symfony trae una consola que permite realizar un gran cantidad de operaciones con nuestro proyecto. Normalmente los comandos se identifican con un prefijo, que indica un grupo de operaciones y uno o varios sufijos que es la operaci\u00f3n de ese grupo que queremos lanzar. La consola est\u00e1 dentro del directorio bin y, si estamos en la raiz del proyecto la podemos lanzar con: bin/console Para ver el listado de comandos: bin/console list Los grupos que m\u00e1s nos interesan son: config: para ver la configuraci\u00f3n del entorno debug: para obtener informaci\u00f3n de depuraci\u00f3n doctrine: para manejar la base de datos. doctrine:database: permite crear o borrar la base de datos doctrine:migrations: permite administrar las migraciones doctrine:schema: permite administrar el esquema de nuestra base de datos make: conjunto de assistentes que nos permite crear nuevos elementos del sistema Symfony soporta plugins, aqu\u00ed llamados bundles, que permiten a\u00f1adir nuevas funcionalidades al framework, entre ellas nuevos comandos a la consola. El grupo de comandos make nos da acceso a diferentes asistentes que nos permitir\u00e1n realizar una configuraci\u00f3n b\u00e1sica del sistema. Algunas de estas funciones son: Controladores \u00b6 make:controller \u00b6 Si ejecutamos: bin/console make:controller Nos crear\u00e1 un controlador b\u00e1sico, cuyo ruta ser\u00e1 el nombre del controlador. Ejemplo: bin/console make:controller homepage Crear\u00e1 el archivo src/Controller/HomepageController.php y la correspondiente plantilla en templates/homepage/index.html.twig . make:crud \u00b6 Normalmente, las operaciones que queremos realizar con nuestro proyecto son operaciones tipo CRUD. Con este asistente podremos crear un controlador t\u00edpico que nos permitir\u00e1 generar este tipo de controladores. Lo veremos m\u00e1s adelante. Seguridad \u00b6 make:user \u00b6 Si ejecutamos: bin/console make:user Nos crear\u00e1 una clase que representa a un usuario de la aplicaci\u00f3n. Ejemplo: bin/console make:user client Y responderemos yes para guardarlo en la base de datos, email como nombre de usuario y yes para guardar la contrase\u00f1a. La respuesta que obtendremos ser\u00e1 esta: created: src/Entity/Client.php created: src/Repository/ClientRepository.php updated: src/Entity/Client.php updated: config/packages/security.yaml Lo cual nos crea una entidad usuario y su repositorio y nos configura el archivo de seguridad. make:registration-form \u00b6 Nos permite generar un formulario de registro. Ejemplo: bin/console make:registration-form Y responderemos: yes para asegurar que no se genera dos usuarios con el mismo correo, no a enviar un correo de confirmaci\u00f3n, yes para autenticar al usuario autom\u00e1ticamente y escogeremos homepage como p\u00e1gina de retorno. La respuesta que obtendremos: updated: src/Entity/Client.php created: src/Form/RegistrationFormType.php created: src/Controller/RegistrationController.php created: templates/registration/register.html.twig Indica que ha actualizado la clase cliente, creado el formulario de registro, el controlador y la plantilla. make:auth \u00b6 Nos permite generar una p\u00e1gina de inicio de sesi\u00f3n. Ejemplo: bin/console make:auth Y responderemos: 1. Login Form Auth , ClientAuthenticator como nombre de la clase, ClientSecurityController como nombre del controlador y yes a la pregunta final para generar la ruta de logout. Doctrine \u00b6 Para nosotros lo m\u00e1s importante es generar nuestro diagrama de clases, pero para que podamos almacenar la informaci\u00f3n en la base de datos debemos establecer una relaci\u00f3n entre clases y tablas, entre instancias y tuplas, entre attributos y campos. Para ello tenemos otro asistente m\u00e1s que es: bin/console make:entity Este asistente permite crear o modificar entidades. Por ejemplo, vamos a modificar la entidad cliente para a\u00f1adir la fecha de nacimiento: bin/console make:entity client Symfony detecta que ya hay una clase con ese nombre y entra en modo edici\u00f3n, si no existiera crear\u00eda una nueva, asign\u00e1ndole un id autom\u00e1ticamente. Posteriormente el asistente nos ir\u00e1 preguntando el nombre de cada atributo de nuestra clase y de qu\u00e9 tipo de dato se trata, o si se trata de una relaci\u00f3n (uno a uno, uno a muchos, muchos a uno, muchos a muchos). Dependiendo de si indicamos que es un atributo o una relaci\u00f3n, nos har\u00e1 preguntas extra, como si el valor pueder ser nulo en el caso de los atributos, o si la relaci\u00f3n puede ser nula (0 \u00f3 1, 0 \u00f3 n) en el caso de relaciones. Entre otras preguntas. Todas est\u00e1n relacionadas con los conocimientos que ya ten\u00e9is de bases de datos relaciones. Es importante que sep\u00e1is ver esa relaci\u00f3n para entender lo que ocurre. Vamos a a\u00f1adir el campo bornAt para almacenar la fecha de nacimiento. El sistema nos indicar\u00e1 que es del tipo datetime, nosotros indicaremos que es de tipo date. E indicaremos que puede ser nulo en la base de datos. Pulsaremos intro de nuevo y la clase Cliente se habr\u00e1 modificado. Symfony por defecto establece que todos los atributos son de tipo cadena, excepto para aquellos que acaben en At que los trata como fecha y hora y los que empiezan por is que los trata como si fueran boleanos. Es un convenio y no es obligatorio que se llamen as\u00ed. Migraciones \u00b6 Aunque podr\u00edamos manejar el esquema con la orden doctrine:schema:update de la consola es conveniente usar migraciones. Una migraci\u00f3n es un conjunto de cambios entre una versi\u00f3n y otra. Es decir, que debemos generar las migraciones solo cuando vayamos a crear una nueva versi\u00f3n del software, o despu\u00e9s de un conjunto de cambios (commits) de nuestro sistema, para compartirlos con el resto de usuarios. Para generar una migraci\u00f3n ejecutaremos: bin/console make:migration Lo cual nos generar\u00e1 un nuevo script de migraciones en el directorio migrations . Podemos aprovechar para modificarlo si nos interesa y ejecutarlo con: bin/console doctrine:migrations:migrate M\u00e1s informaci\u00f3n de Doctrine","title":"D\u00eda 2"},{"location":"dia2/#dia-2","text":"","title":"D\u00eda 2"},{"location":"dia2/#consola","text":"Symfony trae una consola que permite realizar un gran cantidad de operaciones con nuestro proyecto. Normalmente los comandos se identifican con un prefijo, que indica un grupo de operaciones y uno o varios sufijos que es la operaci\u00f3n de ese grupo que queremos lanzar. La consola est\u00e1 dentro del directorio bin y, si estamos en la raiz del proyecto la podemos lanzar con: bin/console Para ver el listado de comandos: bin/console list Los grupos que m\u00e1s nos interesan son: config: para ver la configuraci\u00f3n del entorno debug: para obtener informaci\u00f3n de depuraci\u00f3n doctrine: para manejar la base de datos. doctrine:database: permite crear o borrar la base de datos doctrine:migrations: permite administrar las migraciones doctrine:schema: permite administrar el esquema de nuestra base de datos make: conjunto de assistentes que nos permite crear nuevos elementos del sistema Symfony soporta plugins, aqu\u00ed llamados bundles, que permiten a\u00f1adir nuevas funcionalidades al framework, entre ellas nuevos comandos a la consola. El grupo de comandos make nos da acceso a diferentes asistentes que nos permitir\u00e1n realizar una configuraci\u00f3n b\u00e1sica del sistema. Algunas de estas funciones son:","title":"Consola"},{"location":"dia2/#controladores","text":"","title":"Controladores"},{"location":"dia2/#makecontroller","text":"Si ejecutamos: bin/console make:controller Nos crear\u00e1 un controlador b\u00e1sico, cuyo ruta ser\u00e1 el nombre del controlador. Ejemplo: bin/console make:controller homepage Crear\u00e1 el archivo src/Controller/HomepageController.php y la correspondiente plantilla en templates/homepage/index.html.twig .","title":"make:controller"},{"location":"dia2/#makecrud","text":"Normalmente, las operaciones que queremos realizar con nuestro proyecto son operaciones tipo CRUD. Con este asistente podremos crear un controlador t\u00edpico que nos permitir\u00e1 generar este tipo de controladores. Lo veremos m\u00e1s adelante.","title":"make:crud"},{"location":"dia2/#seguridad","text":"","title":"Seguridad"},{"location":"dia2/#makeuser","text":"Si ejecutamos: bin/console make:user Nos crear\u00e1 una clase que representa a un usuario de la aplicaci\u00f3n. Ejemplo: bin/console make:user client Y responderemos yes para guardarlo en la base de datos, email como nombre de usuario y yes para guardar la contrase\u00f1a. La respuesta que obtendremos ser\u00e1 esta: created: src/Entity/Client.php created: src/Repository/ClientRepository.php updated: src/Entity/Client.php updated: config/packages/security.yaml Lo cual nos crea una entidad usuario y su repositorio y nos configura el archivo de seguridad.","title":"make:user"},{"location":"dia2/#makeregistration-form","text":"Nos permite generar un formulario de registro. Ejemplo: bin/console make:registration-form Y responderemos: yes para asegurar que no se genera dos usuarios con el mismo correo, no a enviar un correo de confirmaci\u00f3n, yes para autenticar al usuario autom\u00e1ticamente y escogeremos homepage como p\u00e1gina de retorno. La respuesta que obtendremos: updated: src/Entity/Client.php created: src/Form/RegistrationFormType.php created: src/Controller/RegistrationController.php created: templates/registration/register.html.twig Indica que ha actualizado la clase cliente, creado el formulario de registro, el controlador y la plantilla.","title":"make:registration-form"},{"location":"dia2/#makeauth","text":"Nos permite generar una p\u00e1gina de inicio de sesi\u00f3n. Ejemplo: bin/console make:auth Y responderemos: 1. Login Form Auth , ClientAuthenticator como nombre de la clase, ClientSecurityController como nombre del controlador y yes a la pregunta final para generar la ruta de logout.","title":"make:auth"},{"location":"dia2/#doctrine","text":"Para nosotros lo m\u00e1s importante es generar nuestro diagrama de clases, pero para que podamos almacenar la informaci\u00f3n en la base de datos debemos establecer una relaci\u00f3n entre clases y tablas, entre instancias y tuplas, entre attributos y campos. Para ello tenemos otro asistente m\u00e1s que es: bin/console make:entity Este asistente permite crear o modificar entidades. Por ejemplo, vamos a modificar la entidad cliente para a\u00f1adir la fecha de nacimiento: bin/console make:entity client Symfony detecta que ya hay una clase con ese nombre y entra en modo edici\u00f3n, si no existiera crear\u00eda una nueva, asign\u00e1ndole un id autom\u00e1ticamente. Posteriormente el asistente nos ir\u00e1 preguntando el nombre de cada atributo de nuestra clase y de qu\u00e9 tipo de dato se trata, o si se trata de una relaci\u00f3n (uno a uno, uno a muchos, muchos a uno, muchos a muchos). Dependiendo de si indicamos que es un atributo o una relaci\u00f3n, nos har\u00e1 preguntas extra, como si el valor pueder ser nulo en el caso de los atributos, o si la relaci\u00f3n puede ser nula (0 \u00f3 1, 0 \u00f3 n) en el caso de relaciones. Entre otras preguntas. Todas est\u00e1n relacionadas con los conocimientos que ya ten\u00e9is de bases de datos relaciones. Es importante que sep\u00e1is ver esa relaci\u00f3n para entender lo que ocurre. Vamos a a\u00f1adir el campo bornAt para almacenar la fecha de nacimiento. El sistema nos indicar\u00e1 que es del tipo datetime, nosotros indicaremos que es de tipo date. E indicaremos que puede ser nulo en la base de datos. Pulsaremos intro de nuevo y la clase Cliente se habr\u00e1 modificado. Symfony por defecto establece que todos los atributos son de tipo cadena, excepto para aquellos que acaben en At que los trata como fecha y hora y los que empiezan por is que los trata como si fueran boleanos. Es un convenio y no es obligatorio que se llamen as\u00ed.","title":"Doctrine"},{"location":"dia2/#migraciones","text":"Aunque podr\u00edamos manejar el esquema con la orden doctrine:schema:update de la consola es conveniente usar migraciones. Una migraci\u00f3n es un conjunto de cambios entre una versi\u00f3n y otra. Es decir, que debemos generar las migraciones solo cuando vayamos a crear una nueva versi\u00f3n del software, o despu\u00e9s de un conjunto de cambios (commits) de nuestro sistema, para compartirlos con el resto de usuarios. Para generar una migraci\u00f3n ejecutaremos: bin/console make:migration Lo cual nos generar\u00e1 un nuevo script de migraciones en el directorio migrations . Podemos aprovechar para modificarlo si nos interesa y ejecutarlo con: bin/console doctrine:migrations:migrate M\u00e1s informaci\u00f3n de Doctrine","title":"Migraciones"},{"location":"dia3/","text":"D\u00eda 3 \u00b6 Estructura de la base de datos \u00b6 Parque: id, nombre, horario, ciudad, latitud, longitud Sendero: id, nombre, estado (abierto/cerrado), dificultad (alta/media/baja) Ruta: id, fecha, duracion, \u00bfes privada?, longitud, plazas, modalidad (a pie, bicicleta, caballo, quad, todoterreno) Orden de trabajo: id, rol (principal, auxiliar) Empleado: id, nombre, apellidos, fecha de nacimiento, dni, tel\u00e9fono, email, direcci\u00f3n, \u00bfest\u00e1 activo? Cliente: id, nombre, apellidos, fecha de nacimiento, dni, tel\u00e9fono, email Entrada: id, fecha venta, coste Notas: Solo se incluyen atributos, no las relaciones. Cliente y empleado son usuario y tendr\u00e1n los atributos que les corresponda (usuario, clave y rol). Ejercicio: Crear las entidades con sus relaciones \u00b6","title":"D\u00eda 3"},{"location":"dia3/#dia-3","text":"","title":"D\u00eda 3"},{"location":"dia3/#estructura-de-la-base-de-datos","text":"Parque: id, nombre, horario, ciudad, latitud, longitud Sendero: id, nombre, estado (abierto/cerrado), dificultad (alta/media/baja) Ruta: id, fecha, duracion, \u00bfes privada?, longitud, plazas, modalidad (a pie, bicicleta, caballo, quad, todoterreno) Orden de trabajo: id, rol (principal, auxiliar) Empleado: id, nombre, apellidos, fecha de nacimiento, dni, tel\u00e9fono, email, direcci\u00f3n, \u00bfest\u00e1 activo? Cliente: id, nombre, apellidos, fecha de nacimiento, dni, tel\u00e9fono, email Entrada: id, fecha venta, coste Notas: Solo se incluyen atributos, no las relaciones. Cliente y empleado son usuario y tendr\u00e1n los atributos que les corresponda (usuario, clave y rol).","title":"Estructura de la base de datos"},{"location":"dia3/#ejercicio-crear-las-entidades-con-sus-relaciones","text":"","title":"Ejercicio: Crear las entidades con sus relaciones"}]}